package GUI;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import com.smartcityDS.smartcityDSGrpc;
import com.smartcityDS.ebusGrpc.ebusBlockingStub;

import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JTextArea;
import java.awt.Panel;
import java.awt.BorderLayout;
import java.awt.Font;
import javax.swing.JTextPane;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;
import sun.security.x509.IPAddressName;
import javax.jmdns.JmDNS;
import javax.jmdns.ServiceEvent;
import javax.jmdns.ServiceInfo;
import javax.jmdns.ServiceListener;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;

public class GUI {
    public JFrame frame;
    public static ServiceInfo serviceinfo;
    public static ebusBlockingStub smartcitydsstub;
    public static void main (String[]args){
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    GUI window = new GUI();
                    window.frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }
    public GUI() throws IOException, InterruptedException {
        String service_type = "_http._tcp.local.";
        discoveryService(service_type);
        String host = serviceinfo.getHostAddresses()[0];
        ManagedChannel channel = ManagedChannelBuilder.forAddress(host, 50053).usePlaintext().build();
        ManagedChannel channel2 = ManagedChannelBuilder.forAddress(host, 50052).usePlaintext().build();
        smartcitydsstub = smartcityDSGrpc.newBlockingStub(channel);
        intializer();
    }

    public void intializer(){
        frame = new JFrame();
        frame.setTitle("Client - Service Controller");
        frame.setBounds(100, 100, 500, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        ui(frame);
    }
	public void discoveryService(String service_type) throws IOException, InterruptedException {
        JmDNS jmdns = JmDNS.create(InetAddress.getLocalHost());
        jmdns.addServiceListener(service_type, new MyServiceListener());
        Thread.sleep(10000);
        jmdns.close();
    }

    private static class MyServiceListener implements ServiceListener {
        public void serviceAdded(ServiceEvent event) {
            System.out.println("Service added: " + event.getInfo());
        }

        public void serviceRemoved(ServiceEvent event) {
            System.out.println("Service removed: " + event.getInfo());
        }

        public void serviceResolved(ServiceEvent event) {
            System.out.println("Service resolved: " + event.getInfo());
            serviceinfo = event.getInfo();
        }

    //buttons
    public void ui(JFrame frame){
        //bus Buttons
        JButton getTimetableBtn = new JButton("Get bus Number");
        JButton getNumberofSeatsBtn = new JButton("Amount of seats on the bus");
        JButton getUsbPortsAvailableBtn = new JButton("Amount of usb ports on the bus");
        // bus text fields
        JTextField TimetableTf = new JTextField();
        JTextField NumberofSeatsTf = new JTextField();
        JTextField UsbPortsAvailableTf = new JTextField();
        
      //scooter Buttons
        JButton getAvailabilityBtn = new JButton("Number of scooters");
        JButton getRentalCostBtn = new JButton("Cost to rent scooters");
        JButton getRentalDurationBtn = new JButton("Rental Time");
        //scooter text fields
        JTextField AvailabilityTf = new JTextField();
        JTextField RentalCostTf = new JTextField();
        JTextField RentalDurationTf = new JTextField();
        
      //car Buttons
        JButton getAvailabilePointsBtn = new JButton("Amount of available plugin points");
        JButton getChargingDurationBtn = new JButton("Charging Duration");
        // car text fields
        JTextField AvailabilePointsTf = new JTextField();
        JTextField ChargingDurationTf = new JTextField();

        //adding to the GUI
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(3, 2));
        panel.add(TimetableTf);
        panel.add(getTimetableBtn);
        panel.add(NumberofSeatsTf);
        panel.add(getNumberofSeatsBtn);
        panel.add(UsbPortsAvailableTf);
        panel.add(getUsbPortsAvailableBtn);
        panel.add(AvailabilityTf);
        panel.add(getAvailabilityBtn);
        panel.add(RentalCostTf);
        panel.add(getRentalCostBtn);
        panel.add(RentalDurationTf);
        panel.add(getRentalDurationBtn);
        panel.add(AvailabilePointsTf);
        panel.add(getAvailabilePointsBtn);
        panel.add(ChargingDurationTf);
        panel.add(getChargingDurationBtn);
        
        frame.add(panel);

        getTimetableBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    int request = Integer.parseInt(getTrainNumberTf.getText());
                    trainNumber requests = trainNumber.newBuilder().setTrainNumber(getTrainNumberTf.getText()).build();
                    trainTimetable reply =  traveldsstub.getTimetable(requests);
                    JOptionPane.showMessageDialog(frame, reply.getTrainTimetable());

                }
                catch(Exception yes){
                    JOptionPane.showMessageDialog(frame, "Only Numbers");
                }
            }
        });


        getNumberofSeatsBtn.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                //get amount of trains
                trainSpecific request = trainSpecific.newBuilder().setTrainSpecific("Hi").build();
                trainAmount reply = traveldsstub.seeBus(request);
                JOptionPane.showMessageDialog(frame, reply.getTrainAmount());

            }

        });



        getUsbPortsAvailableBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //reading from the TF
                try{
                    //if non convertable string is entered it will fail to convert and not send message
                    int number = Integer.parseInt(deleteTrainTf.getText());
                    trainNumber request = trainNumber.newBuilder().setTrainNumber(deleteTrainTf.getText()).build();
                    trainDelete hellos = traveldsstub.deleteBus(request);
                    JOptionPane.showMessageDialog(frame, hellos.getTrainDelete());
                }
                //error handling
                catch(Exception yes){
                    JOptionPane.showMessageDialog(frame, "Only Numbers");
                }

            }
            getTrainNumberBtn.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try{
                        int request = Integer.parseInt(getTrainNumberTf.getText());
                        trainNumber requests = trainNumber.newBuilder().setTrainNumber(getTrainNumberTf.getText()).build();
                        trainTimetable reply =  traveldsstub.getTimetable(requests);
                        JOptionPane.showMessageDialog(frame, reply.getTrainTimetable());

                    }
                    catch(Exception yes){
                        JOptionPane.showMessageDialog(frame, "Only Numbers");
                    }
                }
            });


            trainAmountBtn.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    //get amount of trains
                    trainSpecific request = trainSpecific.newBuilder().setTrainSpecific("Hi").build();
                    trainAmount reply = traveldsstub.seeBus(request);
                    JOptionPane.showMessageDialog(frame, reply.getTrainAmount());

                }

            });



            deleteTrainBtn.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    //reading from the TF
                    try{
                        //if non convertable string is entered it will fail to convert and not send message
                        int number = Integer.parseInt(deleteTrainTf.getText());
                        trainNumber request = trainNumber.newBuilder().setTrainNumber(deleteTrainTf.getText()).build();
                        trainDelete hellos = traveldsstub.deleteBus(request);
                        JOptionPane.showMessageDialog(frame, hellos.getTrainDelete());
                    }
                    //error handling
                    catch(Exception yes){
                        JOptionPane.showMessageDialog(frame, "Only Numbers");
                    }

                }
                getTrainNumberBtn.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        try{
                            int request = Integer.parseInt(getTrainNumberTf.getText());
                            trainNumber requests = trainNumber.newBuilder().setTrainNumber(getTrainNumberTf.getText()).build();
                            trainTimetable reply =  traveldsstub.getTimetable(requests);
                            JOptionPane.showMessageDialog(frame, reply.getTrainTimetable());

                        }
                        catch(Exception yes){
                            JOptionPane.showMessageDialog(frame, "Only Numbers");
                        }
                    }
                });


                trainAmountBtn.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        //get amount of trains
                        trainSpecific request = trainSpecific.newBuilder().setTrainSpecific("Hi").build();
                        trainAmount reply = traveldsstub.seeBus(request);
                        JOptionPane.showMessageDialog(frame, reply.getTrainAmount());

                    }

                });



                deleteTrainBtn.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        //reading from the TF
                        try{
                            //if non convertable string is entered it will fail to convert and not send message
                            int number = Integer.parseInt(deleteTrainTf.getText());
                            trainNumber request = trainNumber.newBuilder().setTrainNumber(deleteTrainTf.getText()).build();
                            trainDelete hellos = traveldsstub.deleteBus(request);
                            JOptionPane.showMessageDialog(frame, hellos.getTrainDelete());
                        }
                        //error handling
                        catch(Exception yes){
                            JOptionPane.showMessageDialog(frame, "Only Numbers");
                        }

                    }
   

        });
    }

}