package smartcity.GUI;


import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;

import javax.jmdns.JmDNS;
import javax.jmdns.ServiceEvent;
import javax.jmdns.ServiceInfo;
import javax.jmdns.ServiceListener;
import javax.swing.*;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import com.smartcityDS.Timetable;
import com.smartcityDS.busNumber;
import com.smartcityDS.locationPrecise;
import com.smartcityDS.numberofSeats;
import com.smartcityDS.preciseLocation;
import com.smartcityDS.usbPorts;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import smartcityDS.bus.smartcityDSGrpc.smartcityDSBlockingStub;
import smartcityDS.bus.smartcityDSGrpc.smartcityDSGrpc;


public class GUI {
    public JFrame frame;
    public static ServiceInfo serviceinfo;
    public static smartcityDSBlockingStub smartcitydsstub;
	private ManagedChannel ManagedChannel managed;
    public static void main (String[]args){
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    GUI window = new GUI();
                    window.frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
}
    public GUI() throws IOException, InterruptedException {
    	String service_type = "_http._tcp.local.";
		discoveryService(service_type);
		String host = serviceinfo.getHostAddresses()[0];
		ManagedChannel managed = ManagedChannelBuilder.forAddress(host, 50051).usePlaintext().build();
		ManagedChannel managed2 = ManagedChannelBuilder.forAddress(host, 50053).usePlaintext().build();
		smartcitydsstub = smartcityDSGrpc.newBlockingStub(managed2);
    }

    public void intializer(){
        frame = new JFrame();
        frame.setTitle("Client - Service Controller");
        frame.setBounds(100, 100, 500, 500);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        ui(frame);
    }

    public void discoveryService(String service_type) throws IOException, InterruptedException {
        JmDNS jmdns = JmDNS.create(InetAddress.getLocalHost());
        jmdns.addServiceListener(service_type, new MyServiceListener());
        Thread.sleep(10000);
        jmdns.close();
    }

    private static class MyServiceListener implements ServiceListener {
        @Override
		public void serviceAdded(ServiceEvent event) {
            System.out.println("Service added: " + event.getInfo());
        }

        @Override
		public void serviceRemoved(ServiceEvent event) {
            System.out.println("Service removed: " + event.getInfo());
        }

        @Override
		public void serviceResolved(ServiceEvent event) {
            System.out.println("Service resolved: " + event.getInfo());
            serviceinfo = event.getInfo();
        }
    }

    //buttons
    public void ui(JFrame frame){
        //Bus Buttons
        JButton getTimetableBtn = new JButton("Get Bus Timetable");
        JButton getBusNumberBtn = new JButton("Get Bus Number");
        JButton getNumberofSeatsBtn = new JButton("Amount of seats currently available");
        JButton getUsbPortsAvailableBtn = new JButton("Amount of usb ports currently available");

        //Scooter Buttons
        JButton getAvailabilityBtn = new JButton("Local Scooter Availabilty");
        JButton getRentalCostBtn = new JButton("Rental Cost");
        JButton getRentalDurationBtn = new JButton("Rental Duration");

        //Car Buttons
        JButton getAvailabilePointsBtn = new JButton("Number of Available Charging Points");
        JButton getChargingDurationBtn = new JButton("Charging Duration");

        // Bus text fields
        JTextField getTimetableTf = new JTextField();
        JTextField getBusNumberTf = new JTextField();
        JTextField getNumberofSeatsTf = new JTextField();
        JTextField getUsbPortsAvailableTf = new JTextField();

        // Scooter text fields
        JTextField getAvailabilityTf = new JTextField();
        JTextField getRentalCostTf = new JTextField();
        JTextField getRentalDurationTf = new JTextField();

        // Car text fields
        JTextField getAvailabilePointsTf = new JTextField();
        JTextField getChargingDurationTf = new JTextField();

        //adding to the GUI
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(3, 2));
        panel.add(getTimetableTf);
        panel.add(getTimetableBtn);
        panel.add(getBusNumberTf);
        panel.add(getBusNumberBtn);
        panel.add(getNumberofSeatsTf);
        panel.add(getNumberofSeatsBtn);
        panel.add(getUsbPortsAvailableTf);
        panel.add(getUsbPortsAvailableBtn);
        panel.add(getAvailabilityTf);
        panel.add(getAvailabilityBtn);
        panel.add(getRentalCostTf);
        panel.add(getRentalCostBtn);
        panel.add(getRentalDurationTf);
        panel.add(getRentalDurationBtn);
        panel.add(getAvailabilePointsTf);
        panel.add(getAvailabilePointsBtn);
        panel.add(getChargingDurationTf);
        panel.add(getChargingDurationBtn);
        frame.add(panel);

        getTimetableBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    int request = Integer.parseInt(getTimetableTf.getText());
                    Timetable requests = Timetable.newBuilder().setTimetable(getTimetableTf.getText()).build();
                    Timetable reply =  smartcitydsstub.getTimetable(requests);
                    JOptionPane.showMessageDialog(frame, reply.getTimetable());

                }
                catch(Exception yes){
                    JOptionPane.showMessageDialog(frame, "Only Numbers");
                }
            }
        });
        getBusNumberBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    int request = Integer.parseInt(getBusNumberTf.getText());
                    busNumber requests = busNumber.newBuilder().setBusNumber(getBusNumberTf.getText()).build();
                    busNumber reply =  smartcitydsstub.getbusNumberTf(requests);
                    JOptionPane.showMessageDialog(frame, reply.getBusNumber());

                }
                catch(Exception yes){
                    JOptionPane.showMessageDialog(frame, "Only Numbers");
                }
            }
        });


        getNumberofSeatsBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    int request = Integer.parseInt(getNumberofSeatsTf.getText());
                    numberofSeats requests = numberofSeats.newBuilder().setNumberofSeats(getNumberofSeatsTf.getText()).build();
                    numberofSeats reply =  smartcitydsstub.getNumberofSeats(requests);
                    JOptionPane.showMessageDialog(frame, reply.getNumberofSeats());

                }
                catch(Exception yes){
                    JOptionPane.showMessageDialog(frame, "Only Numbers");
                }
            }
        });



        getUsbPortsAvailableBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    int request = Integer.parseInt(getUsbPortsAvailableTf.getText());
                    ManagedChannel requests = usbPorts.newBuilder().getUsbPortsAvailable(getUsbPortsAvailableTf.getText()).build();
                    usbPorts reply =  smartcitydsstub.getusbPortstf(requests);
                    JOptionPane.showMessageDialog(frame, reply.getUsbPorts());

                }
                catch(Exception yes){
                    JOptionPane.showMessageDialog(frame, "Only Numbers");
                }
            }
        });

        getAvailabilityBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    int request = Integer.parseInt(getAvailabilityTf.getText());
                    ManagedChannel requests = locationPrecise.newBuilder().setAvailability(getAvailabilityTf.getText()).build();
                    locationPrecise reply =  smartcitydsstub.getAvailabilty(requests);
                    JOptionPane.showMessageDialog(frame, reply.getAvailabilty());

                }
                catch(Exception yes){
                    JOptionPane.showMessageDialog(frame, "Only Numbers");
                }
            }
        });


        getRentalCostBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    int request = Integer.parseInt(getRentalCostTf.getText());
                    ManagedChannel requests = locationPrecise.newBuilder().setRentalCost(getRentalCostTf.getText()).build();
                    locationPrecise reply =  smartcitydsstub.getRentalCost(requests);
                    JOptionPane.showMessageDialog(frame, reply.getRentalCost());

                }
                catch(Exception yes){
                    JOptionPane.showMessageDialog(frame, "Only Numbers");
                }
            }
        });


        getRentalDurationBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    int request = Integer.parseInt(getRentalDurationTf.getText());
                    ManagedChannel requests = locationPrecise.newBuilder().setRentalDuration(getRentalDurationTf.getText()).build();
                    locationPrecise reply =  smartcitydsstub.getRentalDuration(requests);
                    JOptionPane.showMessageDialog(frame, reply.getRentalDuration());

                }
                catch(Exception yes){
                    JOptionPane.showMessageDialog(frame, "Only Numbers");
                }
            }
        });


        getAvailabilePointsBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    int request = Integer.parseInt(getAvailabilePointsTf.getText());
                    ManagedChannel requests = preciseLocation.newBuilder().setAvailabilePoints(getAvailabilePointsTf.getText()).build();
                    preciseLocation reply =  smartcitydsstub.getAvailabilePoints(requests);
                    JOptionPane.showMessageDialog(frame, reply.getAvailabilePoints());

                }
                catch(Exception yes){
                    JOptionPane.showMessageDialog(frame, "Only Numbers");
                }
            }
        });


        getChargingDurationBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    int request = Integer.parseInt(getChargingDurationTf.getText());
                    ManagedChannel requests = preciseLocation.newBuilder().setChargingDuration(getChargingDurationTf.getText()).build();
                    preciseLocation reply =  smartcitydsstub.getChargingDuration(requests);
                    JOptionPane.showMessageDialog(frame, reply.getChargingDuration());

                }
                catch(Exception yes){
                    JOptionPane.showMessageDialog(frame, "Only Numbers");
                }
            }
        });

    }

}