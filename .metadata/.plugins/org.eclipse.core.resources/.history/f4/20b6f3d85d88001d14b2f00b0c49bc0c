package GUI;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;
import sun.security.x509.IPAddressName;
import javax.jmdns.JmDNS;
import javax.jmdns.ServiceEvent;
import javax.jmdns.ServiceInfo;
import javax.jmdns.ServiceListener;
import javax.swing.*;

import com.smartcityDS.smartcityDSBlockingStub;

import grpcSmartCity.ebus.busNumber;
import grpcSmartCity.ebus.busTimetable;
import grpcSmartCity.escooter.preciseLocation;
import grpcSmartCity.escooter.scooterSpecific;
import grpcSmartCity.escooter.smartcityDSGrpc;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;


public class GUI {
    public JFrame frame;
    public static ServiceInfo serviceinfo;
    public static grpcSmartCity.escooter.smartcityDSGrpc.smartcityDSBlockingStub smartcitydsstub;
    public static void main (String[]args){
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    GUI window = new GUI();
                    window.frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
}
    public GUI() throws IOException, InterruptedException {
        String service_type = "_http._tcp.local.";
        discoveryService(service_type);
        String host = serviceinfo.getHostAddresses()[0];
        ManagedChannel channel = ManagedChannelBuilder.forAddress(host, 50053).usePlaintext().build();
        ManagedChannel channel2 = ManagedChannelBuilder.forAddress(host, 50052).usePlaintext().build();
        smartcitydsstub = smartcityDSGrpc.newBlockingStub(channel);
        intializer();
    }

    public void intializer(){
        frame = new JFrame();
        frame.setTitle("Client - Service Controller");
        frame.setBounds(100, 100, 500, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        ui(frame);
    }

    public void discoveryService(String service_type) throws IOException, InterruptedException {
        JmDNS jmdns = JmDNS.create(InetAddress.getLocalHost());
        jmdns.addServiceListener(service_type, new MyServiceListener());
        Thread.sleep(10000);
        jmdns.close();
    }

    private static class MyServiceListener implements ServiceListener {
        public void serviceAdded(ServiceEvent event) {
            System.out.println("Service added: " + event.getInfo());
        }

        public void serviceRemoved(ServiceEvent event) {
            System.out.println("Service removed: " + event.getInfo());
        }

        public void serviceResolved(ServiceEvent event) {
            System.out.println("Service resolved: " + event.getInfo());
            serviceinfo = event.getInfo();
        }
    }

    //buttons
    public void ui(JFrame frame){
        //bus Buttons
        JButton getBusNumberBtn = new JButton("Get bus Number");
        JButton ScooterAmountBtn = new JButton("Amount of scooters in the area");
        JButton CarAmountBtn = new JButton("Amount of plugin points in the area");
        JButton deleteBusBtn = new JButton("Delete bus from route");
        JButton deleteScooterBtn = new JButton("Delete scooter from area");
        JButton deleteCarBtn = new JButton("Delete car from route");
        // bus text fields
        JTextField getBusNumberTf = new JTextField();
        JTextField BusAmountTf = new JTextField();
        JTextField deleteBusTf = new JTextField();
        
        // car text fields
        JTextField getCarPluginPointsAmountTf = new JTextField();
        JTextField PluginDurationTf = new JTextField();
        JTextField deleteCarTf = new JTextField();
        
        // scooter text fields
        JTextField getScooterAmountTf = new JTextField();
        JTextField RentalCostTf = new JTextField();
        JTextField RentalDurationTf = new JTextField();
        JTextField deleteScooterTf = new JTextField();

        //adding to the GUI
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(3, 2));
        panel.add(deleteBusTf);
        panel.add(deleteBusBtn);
        panel.add(deleteCarTf);
        panel.add(CarAmountBtn);
        panel.add(deleteScooterTf);
        panel.add(deleteScooterBtn);
        frame.add(panel);

        getBusNumberBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    int request = Integer.parseInt(deleteBusTf.getText());
                    busNumber requests = busNumber.newBuilder().setBusNumber(deleteBusTf.getText()).build();
                    busTimetable reply =  smartcitydsstub.getTimetable(requests);
                    JOptionPane.showMessageDialog(frame, reply.getBusTimetable());

                }
                catch(Exception yes){
                    JOptionPane.showMessageDialog(frame, "Only Numbers");
                }
            }
        });


        deleteScooterBtn.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                //get amount of buss
                preciseLocation request = scooterSpecific.newBuilder().setScooterSpecific("Hi").build();
                scooterAvailability reply = smartcitydsstub.seeBus(request);
                JOptionPane.showMessageDialog(frame, reply.getbusAmount());

            }

        });



        deleteBusBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //reading from the TF
                try{
                    //if non convertable string is entered it will fail to convert and not send message
                    int number = Integer.parseInt(deleteBusTf.getText());
                    busNumber request = busNumber.newBuilder().setBusNumber(deleteBusTf.getText()).build();
                    busDelete hellos = traveldsstub.deleteBus(request);
                    JOptionPane.showMessageDialog(frame, hellos.getbusDelete());
                }
                //error handling
                catch(Exception yes){
                    JOptionPane.showMessageDialog(frame, "Only Numbers");
                }

            }


        });
    }

}