package grpcSmartCity.ebus;

import io.grpc.BindableService;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.stub.StreamObserver;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Properties;
import javax.jmdns.JmDNS;
import javax.jmdns.ServiceInfo;
import org.apache.commons.lang3.ArrayUtils;

import grpcSmartCity.ebus.smartcityDSGrpc.smartcityDSImplBase;

//bus server class
public class busServer extends smartcityDSImplBase{

    static int [] bus = {16,33,41,1,4};


    public static void main(String[] args) throws IOException, InterruptedException {

        busServer server = new busServer();
        Properties prop = server.getProperties();
        server.register(prop);
        int port = Integer.valueOf(prop.getProperty("service_port"));

        try {
            //creating the server
            Server servers = ServerBuilder.forPort(port).addService(server).build().start();
            System.out.println("Server started, awaiting RPC calls...");
            servers.awaitTermination();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }


    }

    public Properties getProperties() {
        Properties p = null;
        try (InputStream input = new FileInputStream("src/main/resources/properties/ebus.properties")) {
            p = new Properties();
            p.load(input);
            System.out.println("Service properties...");
            System.out.println("\t service_description: " + p.getProperty("service_description"));
            System.out.println("\t service_type: " + p.getProperty("service_type"));
            System.out.println("\t service_name: " + p.getProperty("service_name"));
            System.out.println("\t service_port: " + p.getProperty("service_port"));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return p;

    }

    public void register(Properties paper) throws IOException, InterruptedException {
        //service is discoverable
        JmDNS jmdns = JmDNS.create(InetAddress.getLocalHost());

        String service_type = paper.getProperty("service_type");
        String service_name = paper.getProperty("service_name");
        String service_description_properties = paper.getProperty("service_description");
        int service_port = Integer.valueOf(paper.getProperty("service_port"));

        ServiceInfo serviceInfo = ServiceInfo.create(service_type, service_name, service_port,
                service_description_properties);

        //final register
        jmdns.registerService(serviceInfo);
        System.out.printf("registrering service with type %s and name %s \n", service_type, service_name);
        Thread.sleep(1000);
    }

    @Override
    //delete bus request
    public void deletebus(busNumber request, StreamObserver<busDelete> responseObserver) {

        int busrequest = Integer.parseInt(request.getBusNumber());

        for (int i = 0; i < bus.length; i++) {
            if (busrequest == bus[i]) {
                //removing buss from system
                bus = ArrayUtils.remove(bus, i);
                busDelete reply = busDelete.newBuilder().setBusDelete("Positive").build();
                responseObserver.onNext(reply);
                break;
            } else {
                busDelete reply = busDelete.newBuilder().setBusDelete("Negitive").build();
                responseObserver.onNext(reply);
                break;
            }
        }
        responseObserver.onCompleted();
    }

    @Override
    //get amount of buss
    public void seebus (Location request, StreamObserver<busNumber> responseObserver){
        busAmount reply = busNumber.newBuilder().setbusAmount(String.valueOf(bus)).build();
        responseObserver.onNext(reply);
        responseObserver.onCompleted();
    }

    @Override
    //Is bus Available?
    public void getbusAvailability(busAmount request, StreamObserver<busAvailability> responseObserver){
        busAvailability reply = busAvailability.newBuilder().setbusAvailability("Sold Out").build();
        responseObserver.onNext(reply);
        responseObserver.onCompleted();
    }
}